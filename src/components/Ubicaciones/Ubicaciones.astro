---
// Ubicaciones.astro - Sección de mapa con ubicaciones Zumgo

// Acceder al token de Mapbox desde variables de entorno
const MAPBOX_TOKEN = import.meta.env.MAPBOX_ACCESS_TOKEN

// Ubicaciones de ejemplo en Barcelona
const ubicaciones = [
  {
    id: 1,
    nombre: 'Hospital Clínic',
    tipo: 'Hospital',
    coordenadas: [2.1528, 41.3888],
    direccion: 'Carrer de Villarroel, 170, Eixample',
  },
  {
    id: 2,
    nombre: 'Universitat de Barcelona',
    tipo: 'Universidad',
    coordenadas: [2.164, 41.3838],
    direccion: 'Gran Via de les Corts Catalanes, 585, Eixample',
  },
  {
    id: 3,
    nombre: 'Centro Comercial Arenas',
    tipo: 'Centro Comercial',
    coordenadas: [2.1493, 41.3755],
    direccion: 'Gran Via de les Corts Catalanes, 373-385, Sants',
  },
  {
    id: 4,
    nombre: 'Estación Barcelona Sants',
    tipo: 'Estación de Tren',
    coordenadas: [2.1406, 41.3793],
    direccion: 'Plaça dels Països Catalans, s/n, Sants',
  },
  {
    id: 5,
    nombre: 'DIR Diagonal',
    tipo: 'Gimnasio',
    coordenadas: [2.159, 41.3947],
    direccion: 'Avinguda Diagonal, 618, Eixample',
  },
]
---

<section class="ubicaciones" id="ubicaciones">
  <div class="ubicaciones__content">
    <h2 class="ubicaciones__title">¿Dónde encontrar ZUMGO?</h2>

    <div class="ubicaciones__layout">
      <!-- Información lateral -->
      <div class="ubicaciones__info">
        <h3 class="ubicaciones__subtitle">Nuestras ubicaciones</h3>

        <div class="ubicaciones__list">
          {
            ubicaciones.map((ubicacion) => (
              <div class="ubicacion-item" data-ubicacion-id={ubicacion.id}>
                <div class="ubicacion-item__marker">
                  <div class="ubicacion-item__pin" />
                </div>

                <div class="ubicacion-item__info">
                  <h4 class="ubicacion-item__nombre">{ubicacion.nombre}</h4>
                  <p class="ubicacion-item__tipo">{ubicacion.tipo}</p>
                  <p class="ubicacion-item__direccion">{ubicacion.direccion}</p>
                </div>
              </div>
            ))
          }
        </div>
      </div>

      <!-- Contenedor del mapa -->
      <div class="ubicaciones__map-container">
        <div id="mapa-zumgo" class="ubicaciones__map"></div>
      </div>
    </div>
  </div>
</section>

<!-- Cargar Mapbox GL JS -->
<script src="https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.js"></script>
<link
  href="https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.css"
  rel="stylesheet"
/>

<style>
  @import url('./Ubicaciones.css');
</style>

<script define:vars={{ ubicaciones, MAPBOX_TOKEN }}>
  // Pasar datos a variables globales
  window.ubicacionesZumgo = ubicaciones
  window.mapboxToken = MAPBOX_TOKEN

  let map = null
  let markers = []

  document.addEventListener('DOMContentLoaded', function () {
    setTimeout(() => {
      initMap()
      initUbicacionesInteraction()
    }, 200)
  })

  function initMap() {
    const accessToken = window.mapboxToken
    const mapContainer = document.getElementById('mapa-zumgo')

    if (!accessToken) {
      mapContainer.innerHTML =
        '<div style="padding: 2rem; text-align: center; color: var(--color-mint);">Error: Token de Mapbox no configurado</div>'
      return
    }

    // Verificar dimensiones y forzar si es necesario
    if (mapContainer.offsetWidth === 0 || mapContainer.offsetHeight === 0) {
      const isMobile = window.innerWidth <= 767
      mapContainer.style.width = '100%'
      mapContainer.style.height = isMobile ? '400px' : '600px'
      mapContainer.style.minHeight = isMobile ? '400px' : '600px'
      mapContainer.style.display = 'block'

      setTimeout(() => {
        createMap(accessToken, mapContainer)
      }, 100)
    } else {
      createMap(accessToken, mapContainer)
    }
  }

  function createMap(accessToken, mapContainer) {
    mapboxgl.accessToken = accessToken

    try {
      map = new mapboxgl.Map({
        container: 'mapa-zumgo',
        style: 'mapbox://styles/mapbox/streets-v12',
        center: [2.155, 41.3851],
        zoom: window.innerWidth < 768 ? 11.5 : 12.5,
        pitch: 0,
        bearing: 0,
      })

      map.on('load', () => {
        addUbicacionesMarkers()
      })

      map.on('error', (e) => {
        mapContainer.innerHTML =
          '<div style="padding: 2rem; text-align: center; color: var(--color-yellow);">Error al cargar el mapa</div>'
      })

      map.addControl(new mapboxgl.NavigationControl(), 'top-right')
    } catch (error) {
      mapContainer.innerHTML =
        '<div style="padding: 2rem; text-align: center; color: var(--color-yellow);">Error al inicializar el mapa</div>'
    }
  }

  function addUbicacionesMarkers() {
    const ubicaciones = window.ubicacionesZumgo || []

    if (ubicaciones.length === 0) {
      return
    }

    ubicaciones.forEach((ubicacion) => {
      const markerElement = document.createElement('div')
      markerElement.className = 'custom-marker'
      markerElement.innerHTML = `
        <div class="marker-pin" style="
          width: 50px;
          height: 50px;
          background: linear-gradient(135deg, var(--color-yellow) 0%, #d4941a 100%);
          border: 4px solid var(--color-forest);
          border-radius: 50% 50% 50% 0;
          transform: rotate(-45deg);
          display: flex;
          align-items: center;
          justify-content: center;
          transition: all 0.25s ease;
          box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2), 0 2px 8px rgba(9, 67, 46, 0.3);
          cursor: pointer;
        ">
          <div style="
            transform: rotate(45deg);
            color: var(--color-forest);
            font-family: var(--font-family-coolvetica);
            font-size: 18px;
            font-weight: bold;
            line-height: 1;
          ">Z</div>
        </div>
      `

      const marker = new mapboxgl.Marker(markerElement)
        .setLngLat(ubicacion.coordenadas)
        .addTo(map)

      markers.push({
        marker: marker,
        ubicacion: ubicacion,
        element: markerElement,
      })

      markerElement.addEventListener('click', () => {
        highlightUbicacion(ubicacion.id)
      })
    })
  }

  function highlightUbicacion(ubicacionId) {
    document.querySelectorAll('.ubicacion-item').forEach((item) => {
      item.classList.remove('is-active')
    })

    const selectedItem = document.querySelector(
      `[data-ubicacion-id="${ubicacionId}"]`
    )
    if (selectedItem) {
      selectedItem.classList.add('is-active')
    }

    markers.forEach((markerData) => {
      const markerPin = markerData.element.querySelector('.marker-pin')

      if (markerData.ubicacion.id === ubicacionId) {
        markerPin.style.background =
          'linear-gradient(135deg, var(--color-orange) 0%, #b8471a 100%)'
        markerPin.style.transform = 'rotate(-45deg) scale(1.3)'
        markerPin.style.borderColor = 'var(--color-yellow)'

        if (map) {
          map.flyTo({
            center: markerData.ubicacion.coordenadas,
            zoom: 15,
            duration: 1000,
          })
        }
      } else {
        markerPin.style.background =
          'linear-gradient(135deg, var(--color-yellow) 0%, #d4941a 100%)'
        markerPin.style.transform = 'rotate(-45deg) scale(1)'
        markerPin.style.borderColor = 'var(--color-forest)'
      }
    })
  }

  function initUbicacionesInteraction() {
    document.querySelectorAll('.ubicacion-item').forEach((item) => {
      item.addEventListener('click', () => {
        const ubicacionId = parseInt(item.dataset.ubicacionId)
        highlightUbicacion(ubicacionId)
      })
    })
  }

  window.addEventListener('resize', () => {
    if (map) {
      setTimeout(() => {
        map.resize()
      }, 100)
    }
  })
</script>
